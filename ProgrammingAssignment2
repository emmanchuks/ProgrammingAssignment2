# makeCacheMatrix creates a list containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of inverse of the matrix
# 4. get the value of inverse of the matrix


# makeCacheMatrix
makeCacheMatrix <- function(x = matrix()) {
    inv_mat <- NULL
    set <- function(y) {
        x <<- y
        inv_mat <<- NULL
    }
    get <- function() x
    setinverse <- function(inverse) inv_mat <<- inverse
    getinverse <- function() inv_mat
    list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}


## A function that takes an inverted matrix is created
cacheSolve <- function(x, ...) {

# get the cached value
    inv_mat <- x$getinverse()
    
    # if a cached value exists it is returned
    if(!is.null(inv_mat)) {
        message("getting cached data.")
        return(inv_mat)
    }
    
    ## otherwise the matrix is inverted and returned
    data <- x$get()
    inv_mat <- solve(data)
    x$setinverse(inv_mat)
    inv_mat
}
